/* Generated By:JJTree: Do not edit this line. XPathPITest.java */

package dongfang.xsltools.xpath2;

import java.util.Set;

import dongfang.xsltools.controlflow.ControlFlowConfiguration;
import dongfang.xsltools.exceptions.XSLToolsSchemaException;
import dongfang.xsltools.xmlclass.CharGenerator;
import dongfang.xsltools.xmlclass.schemaside.AttributeUse;
import dongfang.xsltools.xmlclass.schemaside.ElementUse;
import dongfang.xsltools.xmlclass.schemaside.SingleTypeXMLClass;
import dongfang.xsltools.xmlclass.xslside.CommentNT;
import dongfang.xsltools.xmlclass.xslside.PINT;
import dongfang.xsltools.xmlclass.xslside.RootNT;
import dongfang.xsltools.xmlclass.xslside.TextNT;
import dongfang.xsltools.xmlclass.xslside.UndeclaredNodeType;

public class XPathPITest extends XPathNodeTest {
  String _target = null;

  static final boolean color = ControlFlowConfiguration.current
      .useColoredContextTypes();

  public XPathPITest(int id) {
    super(id);
  }

  public XPathPITest(XPathParser p, int id) {
    super(p, id);
  }

  public XPathPITest() {
    this(0);
  }

  public void setTarget(String target) {
    this._target = target;
  }

  @Override
public Set<UndeclaredNodeType> etest(Set<UndeclaredNodeType> delta) {
    boolean hasPI = delta.contains(PINT.chameleonInstance);
    delta.clear();
    if (hasPI) {
      if (_target == null)
        delta.add(PINT.chameleonInstance);
      else {
        if (color)
          delta.add(new PINT(_target));
        else
          delta.add(PINT.chameleonInstance);
      }
    }
    return delta;
  }

  @Override
  public boolean accept(AttributeUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(CommentNT nt) {
    return false;
  }

  @Override
  public boolean accept(ElementUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(PINT nt) {
    if (_target == null)
      return true;
    return nt == PINT.chameleonInstance || _target.equals(nt.getTarget());
  }

  @Override
  boolean accept(RootNT nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(TextNT nt) {
    return false;
  }

  @Override
  public String testAttributeAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + CharGenerator.getAbsurdChar();
  }

  @Override
  public String testSDOSAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + PINT.chameleonInstance.getCharRepresentation(clazz);
  }

  @Override
  public String testCDAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + PINT.chameleonInstance.getCharRepresentation(clazz);
  }

  @Override
public String toString() {
    return "processing-instruction(" + (_target == null ? "" : _target) + ")";
  }
}
