/* Generated By:JJTree: Do not edit this line. XPathSchemaAttributeTest.java */

package dongfang.xsltools.xpath2;

import java.util.Collections;
import java.util.Set;

import org.dom4j.QName;

import dongfang.xsltools.exceptions.XSLToolsSchemaException;
import dongfang.xsltools.xmlclass.CharGenerator;
import dongfang.xsltools.xmlclass.schemaside.AttributeUse;
import dongfang.xsltools.xmlclass.schemaside.ElementUse;
import dongfang.xsltools.xmlclass.schemaside.SingleTypeXMLClass;
import dongfang.xsltools.xmlclass.xslside.AttributeNT;
import dongfang.xsltools.xmlclass.xslside.CommentNT;
import dongfang.xsltools.xmlclass.xslside.NodeType;
import dongfang.xsltools.xmlclass.xslside.PINT;
import dongfang.xsltools.xmlclass.xslside.RootNT;
import dongfang.xsltools.xmlclass.xslside.TextNT;
import dongfang.xsltools.xmlclass.xslside.UndeclaredNodeType;

public class XPathSchemaAttributeTest extends XPathQNamedNodeTest {
  public XPathSchemaAttributeTest(int id) {
    super(id);
  }

  public XPathSchemaAttributeTest(XPathParser p, int id) {
    super(p, id);
  }

  /**
   * We can only regard the typed attribute test as an untyped one, and just
   * ignore the type and nillable properties.
   */
  @Override
public Set<UndeclaredNodeType> etest(Set<UndeclaredNodeType> delta) {
    QName qname = this.qname;
    if (qname == null)
      qname = NodeType.ANY_NAME;

    UndeclaredNodeType tester = new AttributeNT(qname);
    if (delta.contains(NodeType.ONE_ANY_NAME_ATTRIBUTE_NT))
      return Collections.singleton(tester);
    if (delta.contains(tester))
      return Collections.singleton(tester);
    return Collections.emptySet();
  }

  @Override
  public boolean accept(AttributeUse nt, SingleTypeXMLClass clazz) {
    // We have to approximate here, ignoring the type derivation thing in
    // the XPath spec.
    return qname.equals(nt.getQName());
  }

  @Override
  boolean accept(CommentNT nt) {
    return false;
  }

  @Override
  public boolean accept(ElementUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(PINT nt) {
    return false;
  }

  @Override
  boolean accept(RootNT nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(TextNT nt) {
    return false;
  }

  @Override
  public String testAttributeAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + clazz.getCharForAttributeName(getQName());
  }

  @Override
  public String testCDAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + CharGenerator.getAbsurdChar();
  }

  @Override
  public String testSDOSAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + CharGenerator.getAbsurdChar();
  }

  @Override
public String toString() {
    return "schema-attribute(" + qname.getQualifiedName() + ")";
  }
}