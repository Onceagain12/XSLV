/* Generated By:JJTree&JavaCC: Do not edit this line. XPathParserConstants.java */
package dongfang.xsltools.xpath2;

public interface XPathParserConstants {

  int EOF = 0;
  int XPATHCOMMENT = 6;
  int DIGIT = 7;
  int STRINGLITERAL = 8;
  int EXPONENT = 9;
  int EQUAL = 10;
  int NOTEQUAL = 11;
  int LESS = 12;
  int LESSOREQUAL = 13;
  int GREATER = 14;
  int GREATEROREQUAL = 15;
  int DOLLAR = 16;
  int LPAREN = 17;
  int RPAREN = 18;
  int DOT = 19;
  int COMMA = 20;
  int COLON = 21;
  int STAR = 22;
  int PLUS = 23;
  int MINUS = 24;
  int PIPE = 25;
  int LBRACKET = 26;
  int RBRACKET = 27;
  int QUESTION = 28;
  int QUOTE = 29;
  int APOS = 30;
  int SLASH = 31;
  int AQUANR = 32;
  int SLASHSLASH = 33;
  int COLONCOLON = 34;
  int LEFTLEFT = 35;
  int RIGHTRIGHT = 36;
  int DOTDOT = 37;
  int IN = 38;
  int IFLPAREN = 39;
  int OR = 40;
  int OF = 41;
  int AS = 42;
  int EQ = 43;
  int NE = 44;
  int LT = 45;
  int LE = 46;
  int GT = 47;
  int GE = 48;
  int IS = 49;
  int TO = 50;
  int FOR = 51;
  int DIV = 52;
  int MOD = 53;
  int AND = 54;
  int THEN = 55;
  int ELSE = 56;
  int IDIV = 57;
  int SOME = 58;
  int CAST = 59;
  int ITEMLPAREN = 60;
  int NODELPAREN = 61;
  int TEXTLPARENRPAREN = 62;
  int EVERY = 63;
  int UNION = 64;
  int TREAT = 65;
  int RETURN = 66;
  int EXCEPT = 67;
  int INSTANCE = 68;
  int CASTABLE = 69;
  int INTERSECT = 70;
  int EMPTY_SEQUENCELPAREN = 71;
  int DOCUMENT_NODELPAREN = 72;
  int COMMENTLPAREN = 73;
  int PROCESSING_INSTRUCTIONLPAREN = 74;
  int ATTRIBUTELPAREN = 75;
  int SCHEMA_ATTRIBUTELPAREN = 76;
  int ELEMENTLPAREN = 77;
  int SCHEMA_ELEMENTLPAREN = 78;
  int SATISFIES = 79;
  int CHILD_AXIS = 80;
  int DESCENDANT_AXIS = 81;
  int SELF_AXIS = 82;
  int ATTRIBUTE_AXIS = 83;
  int DESCENDANT_OR_SELF_AXIS = 84;
  int FOLLOWING_SIBLING_AXIS = 85;
  int FOLLOWING_AXIS = 86;
  int NAMESPACE_AXIS = 87;
  int PARENT_AXIS = 88;
  int ANCESTOR_AXIS = 89;
  int PRECEDING_SIBLING_AXIS = 90;
  int PRECEDING_AXIS = 91;
  int ANCESTOR_OR_SELF_AXIS = 92;
  int DOUBLE = 93;
  int DECIMAL = 94;
  int DIGITS = 95;
  int ANYLOCALNAME = 96;
  int ANYNAMESPACENAME = 97;
  int QNAME = 98;
  int NCNAME = 99;
  int NCNAMECHAR = 100;
  int LETTER = 101;
  int BASECHAR = 102;
  int IDEOGRAMIC = 103;
  int XMLDIGIT = 104;
  int EXTENDER = 105;
  int COMBININGCHAR = 106;
  int CHAR = 107;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "<XPATHCOMMENT>",
    "<DIGIT>",
    "<STRINGLITERAL>",
    "<EXPONENT>",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"$\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\"*\"",
    "\"+\"",
    "\"-\"",
    "\"|\"",
    "\"[\"",
    "\"]\"",
    "\"?\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"/\"",
    "\"@\"",
    "\"//\"",
    "\"::\"",
    "\"<<\"",
    "\">>\"",
    "\"..\"",
    "\"in\"",
    "<IFLPAREN>",
    "\"or\"",
    "\"of\"",
    "\"as\"",
    "\"eq\"",
    "\"ne\"",
    "\"lt\"",
    "\"le\"",
    "\"gt\"",
    "\"ge\"",
    "\"is\"",
    "\"to\"",
    "\"for\"",
    "\"div\"",
    "\"mod\"",
    "\"and\"",
    "\"then\"",
    "\"else\"",
    "\"idiv\"",
    "\"some\"",
    "\"cast\"",
    "<ITEMLPAREN>",
    "<NODELPAREN>",
    "\"text()\"",
    "\"every\"",
    "\"union\"",
    "\"treat\"",
    "\"return\"",
    "\"except\"",
    "\"instance\"",
    "\"castable\"",
    "\"intersect\"",
    "<EMPTY_SEQUENCELPAREN>",
    "<DOCUMENT_NODELPAREN>",
    "<COMMENTLPAREN>",
    "<PROCESSING_INSTRUCTIONLPAREN>",
    "<ATTRIBUTELPAREN>",
    "<SCHEMA_ATTRIBUTELPAREN>",
    "<ELEMENTLPAREN>",
    "<SCHEMA_ELEMENTLPAREN>",
    "\"satisfies\"",
    "\"child::\"",
    "\"descendant::\"",
    "\"self::\"",
    "\"attribute::\"",
    "\"descendant-or-self::\"",
    "\"following-sibling::\"",
    "\"following::\"",
    "\"namespace::\"",
    "\"parent::\"",
    "\"ancestor::\"",
    "\"preceding-sibling::\"",
    "\"preceding::\"",
    "\"ancestor-or-self::\"",
    "<DOUBLE>",
    "<DECIMAL>",
    "<DIGITS>",
    "<ANYLOCALNAME>",
    "<ANYNAMESPACENAME>",
    "<QNAME>",
    "<NCNAME>",
    "<NCNAMECHAR>",
    "<LETTER>",
    "<BASECHAR>",
    "<IDEOGRAMIC>",
    "<XMLDIGIT>",
    "<EXTENDER>",
    "<COMBININGCHAR>",
    "<CHAR>",
  };

}
