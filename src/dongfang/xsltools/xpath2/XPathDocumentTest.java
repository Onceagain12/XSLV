/* Generated By:JJTree: Do not edit this line. XPathDocumentTest.java */

package dongfang.xsltools.xpath2;

import java.util.Set;

import dongfang.xsltools.exceptions.XSLToolsSchemaException;
import dongfang.xsltools.xmlclass.CharGenerator;
import dongfang.xsltools.xmlclass.schemaside.AttributeUse;
import dongfang.xsltools.xmlclass.schemaside.ElementUse;
import dongfang.xsltools.xmlclass.schemaside.SingleTypeXMLClass;
import dongfang.xsltools.xmlclass.xslside.CommentNT;
import dongfang.xsltools.xmlclass.xslside.PINT;
import dongfang.xsltools.xmlclass.xslside.RootNT;
import dongfang.xsltools.xmlclass.xslside.TextNT;
import dongfang.xsltools.xmlclass.xslside.UndeclaredNodeType;

public class XPathDocumentTest extends XPathNodeTest {
  public XPathDocumentTest(int id) {
    super(id);
  }

  public XPathDocumentTest(XPathParser p, int id) {
    super(p, id);
  }

  public XPathElementTest getElementTest() {
    if (jjtGetNumChildren() > 0)
      return (XPathElementTest) jjtGetChild(0);
    return null;
  }

  @Override
  public boolean accept(AttributeUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(CommentNT nt) {
    return false;
  }

  @Override
  public boolean accept(ElementUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(PINT nt) {
    return false;
  }

  @Override
  boolean accept(RootNT nt, SingleTypeXMLClass clazz) {
    // TODO root element test
    XPathElementTest et = getElementTest();
    if (et == null)
      return true;
    return et.getQName().equals(clazz.getDocumentElementDecl().getQName());
  }

  @Override
  boolean accept(TextNT nt) {
    return false;
  }

  @Override
  public Set<UndeclaredNodeType> etest(Set<UndeclaredNodeType> delta) {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
public String toString() {
    String res = "document-node(";
    if (jjtGetNumChildren() > 0)
      res += jjtGetChild(0).toString();
    return res + ")";
  }

  @Override
  public String testCDAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + CharGenerator.getAbsurdChar();
  }

  @Override
  public String testSDOSAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    if (getElementTest() != null) {
      return getElementTest().testSDOSAxisRegExp(clazz);
    }
    return ""
        + clazz
            .getCharForElementName(clazz.getDocumentElementDecl().getQName());
  }

  @Override
  public String testAttributeAxisRegExp(SingleTypeXMLClass clazz) {
    return "" + CharGenerator.getAbsurdChar();
  }
}
