/* Generated By:JJTree: Do not edit this line. XPathTempQName.java */

package dongfang.xsltools.xpath2;

import org.dom4j.QName;

import dongfang.xsltools.exceptions.XSLToolsRuntimeException;
import dongfang.xsltools.exceptions.XSLToolsXPathUnresolvedNamespaceException;
import dongfang.xsltools.model.NamespaceExpander;

public abstract class XPathTempQName extends XPathBase implements
    XPathQNamedTerm {
  QName qname;

  boolean isMultiple;

  public XPathTempQName(int id) {
    super(id);
  }

  public XPathTempQName(XPathParser p, int id) {
    super(p, id);
  }

  public QName getQName() {
    return qname;
  }

  boolean isMultiple() {
    return isMultiple;
  }

  /*
   * The only importants thing around here is that: The "*" qualified name
   * should map to the "*" URI, and the qualified name should have no prefix.
   * This will ensure a consistent representation of names with URI and local
   * name. Names with the "*" prefix (these never have a "*" local name) should
   * map to the "*" URI, BUT retain the "*" prefix.
   */
  public void setQName(String qname, NamespaceExpander expander, String npb) {
    int cix = qname.indexOf(':');
    if (cix >= 0) {
      String prefix = qname.substring(0, cix);
      String local = qname.substring(cix + 1);
      if ("*".equals(prefix)) {
        isMultiple = true;
        this.qname = QName.get(local, prefix, "*");
      } else {
        isMultiple = "*".equals(local);
        try {
          this.qname = expander.getQNameFromString(qname, npb);
        } catch (XSLToolsXPathUnresolvedNamespaceException ex) {
          throw new XSLToolsRuntimeException(ex);
        }
      }
    } else {
      if ("*".equals(qname)) {
        isMultiple = true;
        this.qname = QName.get("*", "", "*"); // For binding of default to non
        // null URI, alter this.
      } else {
        this.qname = QName.get(qname); // For binding of default to non null
        // URI, alter this.
      }
    }
  }

  public void setQName(Token qnameT, NamespaceExpander expander, String npb) {
    setQName(qnameT.image, expander, npb);
  }
  /*
   * void setQName(String prefix, String localName, NamespaceExpander expander)
   * throws XSLToolsXPathUnresolvedNamespaceException { if ("*".equals(prefix)) {
   * qname = QName.get(localName, "", "*"); isMultiple = true; } else { if
   * ("*".equals(localName)) isMultiple = true; String total = (prefix==null ||
   * "".equals(prefix)) ? localName : prefix+':' + localName; qname =
   * expander.getQNameFromString(total,
   * NamespaceExpander.BIND_PREFIXLESS_TO_NO_NAMESPACE); } }
   * 
   * void setQName(Token prefixT, Token localNameT, NamespaceExpander expander)
   * throws XSLToolsXPathUnresolvedNamespaceException { String prefix =
   * prefixT==null ? "" : prefixT.image; String localName = localNameT==null ? "" :
   * localNameT.image; setQName(prefix, localName, expander); }
   */
}
