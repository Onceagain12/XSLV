/* Generated By:JJTree: Do not edit this line. XPathCommentTest.java */

package dongfang.xsltools.xpath2;

import java.util.Set;

import dongfang.xsltools.exceptions.XSLToolsSchemaException;
import dongfang.xsltools.xmlclass.CharGenerator;
import dongfang.xsltools.xmlclass.schemaside.AttributeUse;
import dongfang.xsltools.xmlclass.schemaside.ElementUse;
import dongfang.xsltools.xmlclass.schemaside.SingleTypeXMLClass;
import dongfang.xsltools.xmlclass.xslside.CommentNT;
import dongfang.xsltools.xmlclass.xslside.PINT;
import dongfang.xsltools.xmlclass.xslside.RootNT;
import dongfang.xsltools.xmlclass.xslside.TextNT;
import dongfang.xsltools.xmlclass.xslside.UndeclaredNodeType;

public class XPathCommentTest extends XPathNodeTest {
  public XPathCommentTest(int id) {
    super(id);
  }

  public XPathCommentTest(XPathParser p, int id) {
    super(p, id);
  }

  public XPathCommentTest() {
    this(0);
  }

  @Override
public Set<UndeclaredNodeType> etest(Set<UndeclaredNodeType> delta) {
    boolean hasComment = delta.contains(CommentNT.instance);
    delta.clear();
    if (hasComment)
      delta.add(CommentNT.instance);
    return delta;
  }

  @Override
  boolean accept(CommentNT nt) {
    return true;
  }

  @Override
  public boolean accept(ElementUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  public boolean accept(AttributeUse nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(PINT nt) {
    return false;
  }

  @Override
  boolean accept(RootNT nt, SingleTypeXMLClass clazz) {
    return false;
  }

  @Override
  boolean accept(TextNT nt) {
    return false;
  }

  @Override
public String toString() {
    return "comment()";
  }

  @Override
  public String testAttributeAxisRegExp(SingleTypeXMLClass clazz) {
    return "" + CharGenerator.getAbsurdChar();
  }

  @Override
  public String testSDOSAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + CommentNT.instance.getCharRepresentation(clazz);
  }

  @Override
  public String testCDAxisRegExp(SingleTypeXMLClass clazz)
      throws XSLToolsSchemaException {
    return "" + CommentNT.instance.getCharRepresentation(clazz);
  }
}
