/*
 * Created on 2005-03-12
 */
package dongfang.xsltools.simplification;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.Element;

import dongfang.XMLConstants;
import dongfang.XSLConstants;
import dongfang.xsltools.diagnostics.DiagnosticsConfiguration;
import dongfang.xsltools.diagnostics.ErrorReporter;
import dongfang.xsltools.exceptions.XSLToolsException;
import dongfang.xsltools.model.Stylesheet;
import dongfang.xsltools.model.StylesheetLevel;
import dongfang.xsltools.model.StylesheetModule;
import dongfang.xsltools.util.Dom4jUtil;

/**
 * Saves all modules' original or simplified documents, 
 * using the hierarchial names generated by getHierarchialName() 
 * in StylesheetModule (these names are used because getSystemId()
 * my return any URI at all; hardly good for a file name).
 * 
 * @author dongfang
 */
public class ExternalModuleSaver implements StylesheetProcessor {
  // Prefix to put before each file name (should not contain path parts, just a
  // plain string)
  private String prefix;

  // Directory to save in
  private File baseDir;

  /**
   * New instance.
   * 
   * @param prefix -
   *          file name prefix (no dirs go here pleasee)
   * @param baseDir -
   *          dir in which to save
   * @param cesspool
   */
  public ExternalModuleSaver(String prefix, File baseDir, ErrorReporter cesspool) {
    this.prefix = prefix;
    this.baseDir = baseDir;
    this.cesspool = cesspool;
  }

  public ExternalModuleSaver(String prefix, ErrorReporter cesspool) {
    this(prefix, new File(SimplifierConfiguration.current
        .getExternalModuleSaverDefaultPath()), cesspool);
  }

  public ExternalModuleSaver(File baseFile, ErrorReporter cesspool) {
    this("", baseFile, cesspool);
  }

  public ExternalModuleSaver(ErrorReporter cesspool) {
    this("", cesspool);
  }

  private ErrorReporter cesspool;

  // Map that converts base URIs of stylesheet modules to the names under which
  // they are saved
  private Map<String, String> oldURItoNewUri = new HashMap<String, String>();

  private void sniffURI(StylesheetModule module) {
    String newURIFile = prefix + module.getHierarchialName() + ".xsl";
    oldURItoNewUri.put(module.getSystemId(), newURIFile);
  }

  private void sniffURI(StylesheetLevel group) {
    for (StylesheetModule module : group.contents()) {
      sniffURI(module);
    }

    for (StylesheetLevel groupc : group.imports()) {
      sniffURI(groupc);
    }
  }

  private void save(Document dcopy, File savefile) throws IOException {
    OutputStream fos = new BufferedOutputStream(new FileOutputStream(savefile));
    Dom4jUtil.prettyPrint(dcopy, fos);
  }

  private void save(Document dcopy, String sbase, File savefile)
      throws IOException, URISyntaxException {
    /*
     * Rewrite all imports and includes to use the URIs under which we save here
     */
    URI base = new URI(sbase);

    for (Iterator it = dcopy.getRootElement().elementIterator(); it.hasNext();) {
      Element element = (Element) it.next();
      if (element.getQName().equals(XSLConstants.ELEM_INCLUDE_QNAME)
          || element.getQName().equals(XSLConstants.ELEM_IMPORT_QNAME)) {
        Attribute iURI = element.attribute(XSLConstants.ATTR_HREF_QNAME);
        element.remove(iURI);
        Attribute altered = (Attribute) iURI.clone();
        String oldLoadURI_s = altered.getValue();
        URI oldLoadURI = base.resolve(oldLoadURI_s);
        String newLoadURI = oldURItoNewUri.get(oldLoadURI);
        altered.setValue("file:" + newLoadURI);
        element.add(altered);
        /*
         * Add the original-uri attribute, for reference
         */
        element.addAttribute(XMLConstants.ORIGINAL_URI_ATT_QNAME, oldLoadURI
            .toString());
      }
    }
    /*
     * Save
     */
    save(dcopy, savefile);
  }

  private void save(StylesheetModule module, int version)
      throws XSLToolsException {
    try {
      /*
       * Some URIs are overwritten in the save call, so we work on a clone
       */
      Document dcopy = (Document) module.getDocument(version).clone();
      String filename = oldURItoNewUri.get(module.getSystemId());
      File savefile = new File(baseDir, filename);
      save(dcopy, module.getSystemId(), savefile);
    } catch (IOException ex) {
      cesspool.reportError(new XSLToolsException(ex));
    } catch (URISyntaxException ex) {
      cesspool.reportError(new XSLToolsException(ex));
    }
  }

  private void save(StylesheetLevel level, int n, int version)
      throws XSLToolsException {
    int m = 0;
    for (StylesheetModule module : level.contents()) {
      m++;
      save(module, version);
    }

    for (StylesheetLevel groupc : level.imports()) {
      save(groupc, ++n, version);
    }
  }

  public void process(StylesheetLevel group) throws XSLToolsException {
    save(group, 0, DiagnosticsConfiguration.SIMPLIFIED);
  }

  public void process(StylesheetLevel group, int version)
      throws XSLToolsException {
    save(group, 0, version);
  }

  public void process(Stylesheet stylesheet, int version)
      throws XSLToolsException {
    oldURItoNewUri.clear();
    // sniffURI(stylesheet);
    sniffURI(stylesheet.getPrincipalLevel());
    Document root = (Document) stylesheet.getDocument(version).clone();
    // hmm det er vist klonen jeg skal overskrive ikke
    // originalen....
    Element include = (Element) stylesheet.getDocumentElement(
        StylesheetModule.CORE).selectSingleNode("//xsl:include");
    Attribute href = include.attribute(XSLConstants.ATTR_HREF);
    href.setValue(oldURItoNewUri.get(stylesheet.getPrincipalModule()
        .getSystemId()));

    String filename = prefix + stylesheet.getHierarchialName() + ".xsl";

    File savefile = new File(baseDir, filename);

    try {
      save(root, savefile);
    } catch (IOException ex) {
      cesspool.reportError(new XSLToolsException(ex));
    }

    process(stylesheet.getPrincipalLevel(), version);
  }

  /**
   * Default is to save the simplified stylesheet
   */
  public void process(Stylesheet stylesheet) throws XSLToolsException {
    process(stylesheet, DiagnosticsConfiguration.SIMPLIFIED);
  }
}
