options {
  LOOKAHEAD = 3;
  FORCE_LA_CHECK = true;
  MULTI = true;
  STATIC = false;
  NODE_DEFAULT_VOID = true;
  NODE_PREFIX = "XPath";
}

PARSER_BEGIN(XPathParser)
package dongfang.xsltools.xpath2;

import java.io.Reader;
import java.io.StringReader;
import dongfang.xsltools.model.NamespaceExpander;
import dongfang.xsltools.model.ElementNamespaceExpander;
import dongfang.xsltools.model.NullNamespaceExpander;
import org.dom4j.Element;
import dongfang.xsltools.exceptions.XSLToolsXPathParseException;

public class XPathParser {

NamespaceExpander nsExpander = new NullNamespaceExpander();
String noPrefixBehavior = NamespaceExpander.BIND_PREFIXLESS_TO_NO_NAMESPACE;
static final boolean dump = false;

public static void main(String args[]) throws ParseException {

Reader stread = new StringReader(args[0]);
XPathParser parser = new XPathParser(stread);

long time = System.currentTimeMillis();
for (int i=0; i<1000; i++) {
stread = new StringReader(args[0]);
  parser.ReInit(stread);
  parser.XPath();
}

SimpleNode n = (SimpleNode)parser.jjtree.rootNode();
System.out.println(n);
n.dump("");
System.out.println("Time for 1000 shots: " + (System.currentTimeMillis() - time));
}

public void setNsExpander(NamespaceExpander expander) {
  this.nsExpander = expander;
}

public NamespaceExpander getNsExpander() {
  return nsExpander;
}

public XPathExpr getParseTree() {
  return (XPathExpr)jjtree.rootNode();
}

private static XPathParser p1 = new XPathParser(new StringReader(""));
private static XPathParser p2 = new XPathParser(new StringReader(""));
//private static XPathParser p3 = new XPathParser(new StringReader(""));
private static boolean escape = true;

static {
p1.setNsExpander(new NullNamespaceExpander());
p2.setNsExpander(new ElementNamespaceExpander(null));
}

// that silly parser just won't get some non-ISO-8859
// chars right. Just have to deal with them....
// convert to character entity refs....
private static String convertTroublemakers(String s) {
if (!escape)
return s;
  StringBuilder result = new StringBuilder();
  for (int i=0; i<s.length(); i++) {
    char c = s.charAt(i);
    if ((c >= 32 && c < 256) || c==9 || c==10 || c== 12 || c==13) {
      result.append(c);
    } else {
      result.append("#&x");
      result.append(Integer.toString(c, 16));
      result.append(";");
    }
  }
  return result.toString();
}

private static void reportError(String s, String message) {
  System.err.println("Failed to parse " + s + " : " + message);
  System.err.print('(');
  for (int i=0; i<s.length(); i++) {
    char c = s.charAt(i);
    if (i>0) 
      System.err.print(", ");
    System.err.print(Integer.toString(c));
  }
  System.err.println(')');
}

public static XPathExpr parse(String s) throws XSLToolsXPathParseException {
if (dump) System.err.println("Attempting to parse: " + s);
try {
p1.ReInit(new StringReader(convertTroublemakers(s)));
p1.XPath();
return p1.getParseTree();
} catch (Throwable ex) {
reportError(s, ex.getMessage());
throw new XSLToolsXPathParseException(ex);
}
}

public static XPathExpr parse(String s, NamespaceExpander exp) throws XSLToolsXPathParseException {
if (dump)System.err.println("Attempting to parse: " + s);
NamespaceExpander save = p1.getNsExpander();
p1.setNsExpander(exp);
try {
p1.ReInit(new StringReader(convertTroublemakers(s)));
p1.XPath();
p1.setNsExpander(save);
return p1.getParseTree();
} catch (Throwable ex) {
reportError(s, ex.getMessage());
throw new XSLToolsXPathParseException(ex);
}
}

public static XPathExpr parse(String s, Element expander,String noPrefixBehavior) throws XSLToolsXPathParseException {
if (dump)System.err.println("Attempting to parse: " + s);
try {
p2.ReInit(new StringReader(convertTroublemakers(s)));
p2.noPrefixBehavior = noPrefixBehavior;
ElementNamespaceExpander e = (ElementNamespaceExpander)p2.getNsExpander();
e.setElement(expander);
p2.XPath();
return p2.getParseTree();
} catch (Throwable ex) {
reportError(s, ex.getMessage());
throw new XSLToolsXPathParseException(ex);
}
}
}

PARSER_END(XPathParser)

SPECIAL_TOKEN :
{  " " | "\n" | "\t" | "\r" | "\f" }
SPECIAL_TOKEN :
{
  <XPATHCOMMENT: "(:" (~[])* ":)" >
}

TOKEN :
{
   < #DIGIT: ["0"-"9"] >
  | < STRINGLITERAL: (<QUOTE> (<QUOTE><QUOTE> | ~["\""] )* <QUOTE>) | (<APOS> (<APOS><APOS> | ~["'"])* <APOS>) >
  | < #EXPONENT: "e" | "E" >
  | < EQUAL: "=" > 
  | < NOTEQUAL: "!=" > 
  | < LESS: "<" > 
  | < LESSOREQUAL: "<=" > 
  | < GREATER: ">" > 
  | < GREATEROREQUAL: ">=" >
  | < DOLLAR: "$" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < DOT: "." >
  | < COMMA: "," >
  | < COLON: ":" >
  | < STAR: "*" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < PIPE: "|" >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < QUESTION: "?" >
  | < QUOTE: "\"" >
  | < APOS: "'" >
  | < SLASH: "/" >
  | < AQUANR: "@" >
  | < SLASHSLASH: "//" >
  | < #COLONCOLON: "::" >
  | < LEFTLEFT: "<<" >
  | < RIGHTRIGHT: ">>" >
  | < DOTDOT: ".." >
  | < IN: "in" >
  | < IFLPAREN: "if" "(" >
  | < OR: "or" >
  | < OF: "of" >
  | < AS: "as" >
  | < EQ: "eq" >
  | < NE: "ne" >
  | < LT: "lt" >
  | < LE: "le" >
  | < GT: "gt" >
  | < GE: "ge" >
  | < IS: "is" >
  | < TO: "to" >
  | < FOR: "for" >
  | < DIV: "div" >
  | < MOD: "mod" >
  | < AND: "and" >
  | < THEN: "then" >
  | < ELSE: "else" >
  | < IDIV: "idiv" >
  | < SOME: "some" >
  | < CAST: "cast" >
  | < ITEMLPAREN: "item" "(" >
  | < NODELPAREN: "node" "(" >
  | < TEXTLPARENRPAREN: "text()" >
  | < EVERY: "every" >
  | < UNION: "union" >
  | < TREAT: "treat" >
  | < RETURN: "return" >
  | < EXCEPT: "except" >
  | < INSTANCE: "instance" >
  | < CASTABLE: "castable" >
  | < INTERSECT: "intersect" >
  | < EMPTY_SEQUENCELPAREN: "empty-sequence" "(" >
  | < DOCUMENT_NODELPAREN: "document-node" "(" >
  | < COMMENTLPAREN: "comment" "(">
  | < PROCESSING_INSTRUCTIONLPAREN: "processing-instruction" "(">
  | < ATTRIBUTELPAREN: "attribute" "(" >
  | < SCHEMA_ATTRIBUTELPAREN: "schema-attribute" "(" >
  | < ELEMENTLPAREN: "element" "(">
  | < SCHEMA_ELEMENTLPAREN: "schema-element" "(">
  | < SATISFIES: "satisfies" >
  | < CHILD_AXIS: "child::" >
  | < DESCENDANT_AXIS: "descendant::" >
  | < SELF_AXIS: "self::" >
  | < ATTRIBUTE_AXIS: "attribute::" >
  | < DESCENDANT_OR_SELF_AXIS: "descendant-or-self::" >
  | < FOLLOWING_SIBLING_AXIS: "following-sibling::" >
  | < FOLLOWING_AXIS: "following::" >
  | < NAMESPACE_AXIS: "namespace::" >
  | < PARENT_AXIS: "parent::" >
  | < ANCESTOR_AXIS: "ancestor::" >
  | < PRECEDING_SIBLING_AXIS: "preceding-sibling::" >
  | < PRECEDING_AXIS: "preceding::" >
  | < ANCESTOR_OR_SELF_AXIS: "ancestor-or-self::" >
  | < DOUBLE: ((<DOT> <DIGITS>) | (<DIGITS> (<DOT> (<DIGIT>)*)?)) <EXPONENT> ( <PLUS> | <MINUS> )? <DIGITS> >
  | < DECIMAL: (<DOT> <DIGITS>) | (<DIGITS> <DOT> (<DIGIT>)*) >
  | < DIGITS: (<DIGIT>)+ >
  | < ANYLOCALNAME: <NCNAME> <COLON> <STAR> >
  | < ANYNAMESPACENAME: <STAR> <COLON> <NCNAME> >
  | < QNAME: (<NCNAME> <COLON>)? <NCNAME> > 
  | < #NCNAME: (<LETTER> | "_") (<NCNAMECHAR>)* >
  | < #NCNAMECHAR: <LETTER> | <XMLDIGIT> | "." | "-" | "_" | <COMBININGCHAR> | <EXTENDER> >
  | < #LETTER: < BASECHAR> | <IDEOGRAMIC>>
  | < #BASECHAR: ["\u0041"-"\u005A"] | ["\u0061"-"\u007A"] | ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] | ["\u00F8"-"\u00FF"] | ["\u0100"-"\u0131"] | ["\u0134"-"\u013E"] | ["\u0141"-"\u0148"] | ["\u014A"-"\u017E"] | ["\u0180"-"\u01C3"] | ["\u01CD"-"\u01F0"] | ["\u01F4"-"\u01F5"] | ["\u01FA"-"\u0217"] | ["\u0250"-"\u02A8"] | ["\u02BB"-"\u02C1"] | "\u0386" | ["\u0388"-"\u038A"] | "\u038C" | ["\u038E"-"\u03A1"] | ["\u03A3"-"\u03CE"] | ["\u03D0"-"\u03D6"] | "\u03DA" | "\u03DC" | "\u03DE" | "\u03E0" | ["\u03E2"-"\u03F3"] | ["\u0401"-"\u040C"] | ["\u040E"-"\u044F"] | ["\u0451"-"\u045C"] | ["\u045E"-"\u0481"] | ["\u0490"-"\u04C4"] | ["\u04C7"-"\u04C8"] | ["\u04CB"-"\u04CC"] | ["\u04D0"-"\u04EB"] | ["\u04EE"-"\u04F5"] | ["\u04F8"-"\u04F9"] | ["\u0531"-"\u0556"] | "\u0559" | ["\u0561"-"\u0586"] | ["\u05D0"-"\u05EA"] | ["\u05F0"-"\u05F2"] | ["\u0621"-"\u063A"] | ["\u0641"-"\u064A"] | ["\u0671"-"\u06B7"] | ["\u06BA"-"\u06BE"] | ["\u06C0"-"\u06CE"] | ["\u06D0"-"\u06D3"] | "\u06D5" | ["\u06E5"-"\u06E6"] | ["\u0905"-"\u0939"] | "\u093D" | ["\u0958"-"\u0961"] | ["\u0985"-"\u098C"] | ["\u098F"-"\u0990"] | ["\u0993"-"\u09A8"] | ["\u09AA"-"\u09B0"] | "\u09B2" | ["\u09B6"-"\u09B9"] | ["\u09DC"-"\u09DD"] | ["\u09DF"-"\u09E1"] | ["\u09F0"-"\u09F1"] | ["\u0A05"-"\u0A0A"] | ["\u0A0F"-"\u0A10"] | ["\u0A13"-"\u0A28"] | ["\u0A2A"-"\u0A30"] | ["\u0A32"-"\u0A33"] | ["\u0A35"-"\u0A36"] | ["\u0A38"-"\u0A39"] | ["\u0A59"-"\u0A5C"] | "\u0A5E" | ["\u0A72"-"\u0A74"] | ["\u0A85"-"\u0A8B"] | "\u0A8D" | ["\u0A8F"-"\u0A91"] | ["\u0A93"-"\u0AA8"] | ["\u0AAA"-"\u0AB0"] | ["\u0AB2"-"\u0AB3"] | ["\u0AB5"-"\u0AB9"] | "\u0ABD" | "\u0AE0" | ["\u0B05"-"\u0B0C"] | ["\u0B0F"-"\u0B10"] | ["\u0B13"-"\u0B28"] | ["\u0B2A"-"\u0B30"] | ["\u0B32"-"\u0B33"] | ["\u0B36"-"\u0B39"] | "\u0B3D" | ["\u0B5C"-"\u0B5D"] | ["\u0B5F"-"\u0B61"] | ["\u0B85"-"\u0B8A"] | ["\u0B8E"-"\u0B90"] | ["\u0B92"-"\u0B95"] | ["\u0B99"-"\u0B9A"] | "\u0B9C" | ["\u0B9E"-"\u0B9F"] | ["\u0BA3"-"\u0BA4"] | ["\u0BA8"-"\u0BAA"] | ["\u0BAE"-"\u0BB5"] | ["\u0BB7"-"\u0BB9"] | ["\u0C05"-"\u0C0C"] | ["\u0C0E"-"\u0C10"] | ["\u0C12"-"\u0C28"] | ["\u0C2A"-"\u0C33"] | ["\u0C35"-"\u0C39"] | ["\u0C60"-"\u0C61"] | ["\u0C85"-"\u0C8C"] | ["\u0C8E"-"\u0C90"] | ["\u0C92"-"\u0CA8"] | ["\u0CAA"-"\u0CB3"] | ["\u0CB5"-"\u0CB9"] | "\u0CDE" | ["\u0CE0"-"\u0CE1"] | ["\u0D05"-"\u0D0C"] | ["\u0D0E"-"\u0D10"] | ["\u0D12"-"\u0D28"] | ["\u0D2A"-"\u0D39"] | ["\u0D60"-"\u0D61"] | ["\u0E01"-"\u0E2E"] | "\u0E30" | ["\u0E32"-"\u0E33"] | ["\u0E40"-"\u0E45"] | ["\u0E81"-"\u0E82"] | "\u0E84" | ["\u0E87"-"\u0E88"] | "\u0E8A" | "\u0E8D" | ["\u0E94"-"\u0E97"] | ["\u0E99"-"\u0E9F"] | ["\u0EA1"-"\u0EA3"] | "\u0EA5" | "\u0EA7" | ["\u0EAA"-"\u0EAB"] | ["\u0EAD"-"\u0EAE"] | "\u0EB0" | ["\u0EB2"-"\u0EB3"] | "\u0EBD" | ["\u0EC0"-"\u0EC4"] | ["\u0F40"-"\u0F47"] | ["\u0F49"-"\u0F69"] | ["\u10A0"-"\u10C5"] | ["\u10D0"-"\u10F6"] | "\u1100" | ["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" | ["\u110B"-"\u110C"] | ["\u110E"-"\u1112"] | "\u113C" | "\u113E" | "\u1140" | "\u114C" | "\u114E" | "\u1150" | ["\u1154"-"\u1155"] | "\u1159" | ["\u115F"-"\u1161"] | "\u1163" | "\u1165" | "\u1167" | "\u1169" | ["\u116D"-"\u116E"] | ["\u1172"-"\u1173"] | "\u1175" | "\u119E" | "\u11A8" | "\u11AB" | ["\u11AE"-"\u11AF"] | ["\u11B7"-"\u11B8"] | "\u11BA" | ["\u11BC"-"\u11C2"] | "\u11EB" | "\u11F0" | "\u11F9" | ["\u1E00"-"\u1E9B"] | ["\u1EA0"-"\u1EF9"] | ["\u1F00"-"\u1F15"] | ["\u1F18"-"\u1F1D"] | ["\u1F20"-"\u1F45"] | ["\u1F48"-"\u1F4D"] | ["\u1F50"-"\u1F57"] | "\u1F59" | "\u1F5B" | "\u1F5D" | ["\u1F5F"-"\u1F7D"] | ["\u1F80"-"\u1FB4"] | ["\u1FB6"-"\u1FBC"] | "\u1FBE" | ["\u1FC2"-"\u1FC4"] | ["\u1FC6"-"\u1FCC"] | ["\u1FD0"-"\u1FD3"] | ["\u1FD6"-"\u1FDB"] | ["\u1FE0"-"\u1FEC"] | ["\u1FF2"-"\u1FF4"] | ["\u1FF6"-"\u1FFC"] | "\u2126" | ["\u212A"-"\u212B"] | "\u212E" | ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] | ["\u30A1"-"\u30FA"] | ["\u3105"-"\u312C"] | ["\uAC00"-"\uD7A3"] >
  | < #IDEOGRAMIC: ["\u4E00"-"\u9FA5"] | "\u3007" | ["\u3021"-"\u3029"] >
  | < #XMLDIGIT: ["\u0030"-"\u0039"] | ["\u0660"-"\u0669"] | ["\u06F0"-"\u06F9"] | ["\u0966"-"\u096F"] | ["\u09E6"-"\u09EF"] | ["\u0A66"-"\u0A6F"] | ["\u0AE6"-"\u0AEF"] | ["\u0B66"-"\u0B6F"] | ["\u0BE7"-"\u0BEF"] | ["\u0C66"-"\u0C6F"] | ["\u0CE6"-"\u0CEF"] | ["\u0D66"-"\u0D6F"] | ["\u0E50"-"\u0E59"] | ["\u0ED0"-"\u0ED9"] | ["\u0F20"-"\u0F29"] >
  | < #EXTENDER: "\u00B7" | "\u02D0" | "\u02D1" | "\u0387" | "\u0640" | "\u0E46" | "\u0EC6" | "\u3005" | ["\u3031"-"\u3035"] | ["\u309D"-"\u309E"] | ["\u30FC"-"\u30FE"] >
  | < #COMBININGCHAR: ["\u0300"-"\u0345"] | ["\u0360"-"\u0361"] | ["\u0483"-"\u0486"] | ["\u0591"-"\u05A1"] | ["\u05A3"-"\u05B9"] | ["\u05BB"-"\u05BD"] | "\u05BF" | ["\u05C1"-"\u05C2"] | "\u05C4" | ["\u064B"-"\u0652"] | "\u0670" | ["\u06D6"-"\u06DC"] | ["\u06DD"-"\u06DF"] | ["\u06E0"-"\u06E4"] | ["\u06E7"-"\u06E8"] | ["\u06EA"-"\u06ED"] | ["\u0901"-"\u0903"] | "\u093C" | ["\u093E"-"\u094C"] | "\u094D" | ["\u0951"-"\u0954"] | ["\u0962"-"\u0963"] | ["\u0981"-"\u0983"] | "\u09BC" | "\u09BE" | "\u09BF" | ["\u09C0"-"\u09C4"] | ["\u09C7"-"\u09C8"] | ["\u09CB"-"\u09CD"] | "\u09D7" | ["\u09E2"-"\u09E3"] | "\u0A02" | "\u0A3C" | "\u0A3E" | "\u0A3F" | ["\u0A40"-"\u0A42"] | ["\u0A47"-"\u0A48"] | ["\u0A4B"-"\u0A4D"] | ["\u0A70"-"\u0A71"] | ["\u0A81"-"\u0A83"] | "\u0ABC" | ["\u0ABE"-"\u0AC5"] | ["\u0AC7"-"\u0AC9"] | ["\u0ACB"-"\u0ACD"] | ["\u0B01"-"\u0B03"] | "\u0B3C" | ["\u0B3E"-"\u0B43"] | ["\u0B47"-"\u0B48"] | ["\u0B4B"-"\u0B4D"] | ["\u0B56"-"\u0B57"] | ["\u0B82"-"\u0B83"] | ["\u0BBE"-"\u0BC2"] | ["\u0BC6"-"\u0BC8"] | ["\u0BCA"-"\u0BCD"] | "\u0BD7" | ["\u0C01"-"\u0C03"] | ["\u0C3E"-"\u0C44"] | ["\u0C46"-"\u0C48"] | ["\u0C4A"-"\u0C4D"] | ["\u0C55"-"\u0C56"] | ["\u0C82"-"\u0C83"] | ["\u0CBE"-"\u0CC4"] | ["\u0CC6"-"\u0CC8"] | ["\u0CCA"-"\u0CCD"] | ["\u0CD5"-"\u0CD6"] | ["\u0D02"-"\u0D03"] | ["\u0D3E"-"\u0D43"] | ["\u0D46"-"\u0D48"] | ["\u0D4A"-"\u0D4D"] | "\u0D57" | "\u0E31" | ["\u0E34"-"\u0E3A"] | ["\u0E47"-"\u0E4E"] | "\u0EB1" | ["\u0EB4"-"\u0EB9"] | ["\u0EBB"-"\u0EBC"] | ["\u0EC8"-"\u0ECD"] | ["\u0F18"-"\u0F19"] | "\u0F35" | "\u0F37" | "\u0F39" | "\u0F3E" | "\u0F3F" | ["\u0F71"-"\u0F84"] | ["\u0F86"-"\u0F8B"] | ["\u0F90"-"\u0F95"] | "\u0F97" | ["\u0F99"-"\u0FAD"] | ["\u0FB1"-"\u0FB7"] | "\u0FB9" | ["\u20D0"-"\u20DC"] | "\u20E1" | ["\u302A"-"\u302F"] | "\u3099" | "\u309A" >
  | < CHAR: "\u0009" [" "-"\uD7FF"] | ["\uE000"-"\uFFFD"] > /*  | "\u000A" | "\u000D" | missing !*/
}

void XPath() :
{}
{
  Expr () <EOF>
}

void Expr() #CommaExpr(>1) :
{}
{
  ExprSingle() (<COMMA> ExprSingle())*
}

void ExprSingle() :
{}
{
  OrExpr() | ForExpr() | QuantifiedExpr() | ( IfExpr() )
}

/*
void ForExpr() #ForExpr :
{}
{
  SimpleForClause() <RETURN> ExprSingle()
}
*/

void ForExpr() #ForExpr :
{
  Token qname = null;
}
{
  (<FOR> <DOLLAR> (qname=<QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>) <IN> ExprSingle() (SimpleForClause2())*) <RETURN> ExprSingle()
{
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

void SimpleForClause2() #SimpleForClause2 :
{
  Token qname = null;
}
{
  (<COMMA> <DOLLAR> (qname=<QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>) <IN> ExprSingle())
{
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

void QuantifiedExpr() #QuantifiedExpr :
{
  Token qty = null;
  Token qname = null;
}
{
  ((qty = <SOME> | qty = <EVERY>) <DOLLAR> (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>)
   <IN> ExprSingle() (QuantifiedExpr2())* <SATISFIES> ExprSingle())
{
  jjtThis.setQuantifier(qty.image);
  jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

void QuantifiedExpr2() #QuantifiedExpr2 :
{
  Token qname = null;
}
{
  (<COMMA> <DOLLAR> (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>) <IN> ExprSingle())
{
  jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

void IfExpr() #IfExpr :
{}
{
  <IFLPAREN> Expr() <RPAREN> <THEN> ExprSingle() <ELSE> ExprSingle()
}

/*
 * Subclassed: OrExpr. One or more children.
 */
void OrExpr() # OrExpr(>1) :
{}
{
  AndExpr() ( <OR>  AndExpr())*
}

/*
 * Subclassed: AndExpr. One or more children.
 */
void AndExpr() #AndExpr(>1) :
{}
{
  ComparisonExpr() ( <AND> ComparisonExpr())*
}

void ComparisonExpr() #ComparisonExpr(>1):
{
  Token operator = null;
}
{
 (RangeExpr()((
   operator = <EQ> | operator = <NE> | operator = <LT> | operator = <LE> | operator = <GT> | operator = <GE> |
   operator = <EQUAL> | operator = <NOTEQUAL> | operator = <LESS> | operator = <LESSOREQUAL> | operator = <GREATER> | operator = <GREATEROREQUAL>  | 
   operator = <IS> | operator = <LEFTLEFT> | operator = <RIGHTRIGHT> )
{
  jjtThis.setOperator(operator.image);
}
 RangeExpr() )?
 )
}

void RangeExpr() #RangeExpr(>1) :
{}
{ 
  AdditiveExpr() ( <TO> AdditiveExpr() )*
}

void AdditiveExpr() #AdditiveExpr (>1) : 
{
  Token operator = null;
}
{
  MultiplicativeExpr() (( operator = <PLUS> { jjtThis.addOperator(operator.image); } | operator = <MINUS> { jjtThis.addOperator(operator.image); } ) MultiplicativeExpr())*
}

void MultiplicativeExpr() #MultiplicativeExpr (>1) :
{
  Token operator = null;
}
{
  UnionExpr() (( operator = <STAR> { jjtThis.addOperator(operator.image); } | operator = <DIV> { jjtThis.addOperator(operator.image); } | operator = <IDIV> { jjtThis.addOperator(operator.image); } | operator = <MOD> { jjtThis.addOperator(operator.image); } ) UnionExpr())*
}

void UnionExpr() #UnionExpr(>1) :
{}
{ 
  IntersectExceptExpr() ((<UNION> | <PIPE>) IntersectExceptExpr())*
}

void IntersectExceptExpr() #IntersectExceptExpr (>1) :
{
  Token operator;
}
{
  InstanceofExpr() ((operator = <INTERSECT> {jjtThis.addOperator(operator.image);} | operator = <EXCEPT> {jjtThis.addOperator(operator.image);} ) 
  InstanceofExpr() )*
}

/*
 * gider ikke
 */
void InstanceofExpr() #InstanceOfExpr(>1) :
{}
{
  TreatExpr() ( <INSTANCE> <OF> SequenceType() )?
}

void TreatExpr() #TreatAsExpr(>1):
{}
{ 
  CastableExpr() ( <TREAT> <AS> SequenceType() )?
}

void CastableExpr() #CastableExpr(>1) :
{}
{
  CastExpr() ( <CASTABLE> <AS> SingleType() )?
}

void CastExpr() #CastExpr(>1) :
{}
{
  UnaryExpr() ( <CAST> <AS> SingleType() )?
}

/*
 * This is not quite true to the grammar, but, heck, it only disallows really silly
 * things like writing --+++--27 (who would ever want to do that anyway?).
 */
void UnaryExpr() :
{
  Token sign;
}
{
  (((sign = <MINUS> | sign=<PLUS>) PathExpr() {jjtThis.setSign(sign.image);})#UnaryExpr ) | PathExpr()
}

void PathExpr() :
{}
{
    (<SLASH> (AbsolutePathExpr())?) #AbsolutePathExpr 
  | (<SLASHSLASH> (GenerateDOSNode() AbsolutePathExpr())) #AbsolutePathExpr 
  | RelativePathExpr()
}

/* This represents either of:
 * 1) A name test with no wildcards, with or without an explicit axis. The axis must be sniffed up somehow.
 * 2) Half of a function call
 */
void QNamePathPart() :
{
  Token qname;
}
{
  (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>)  ((<LPAREN> FunctionCallMinusNameAndLParen(qname)) | ChildStepWithNameTest(qname))
}

void FunctionCallMinusNameAndLParen(Token qname) #FunctionCallExpr :
{}
{
  ((ExprSingle() (<COMMA> ExprSingle())*)? <RPAREN> PredicateList())
{ 
  jjtThis.setQName(qname, nsExpander, noPrefixBehavior); 
}
}

void ChildStepWithNameTest(Token qname) #AxisStep :
{}
{
QNameTest(qname) PredicateList()
{jjtThis.fixupDefaultAxis();}
}

void QNameTest(Token qname) #NameTest :
{}
{
{
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

/*
 * This represents any AxisStep or FilterExpr that is not a QNamePathPart.
 */
void NonQNamePathPart() :
{}
{
  NonQNameAxisStep() | NonQNamePrimaryExpr()
}

void PathPart() :
{}
{
  QNamePathPart() | NonQNamePathPart()
}

/*
 * This nonterminal added for ease of distinction
 */
void AbsolutePathExpr() :
{}
{
  PathPart()
  ((<SLASH> (PathPart())) | (<SLASHSLASH> GenerateDOSNode() (PathPart())))*
}

void RelativePathExpr() :
{}
{
(
  PathPart()
  (
    (<SLASH> PathPart()) | (<SLASHSLASH> GenerateDOSNode() PathPart())
  )*
)
 #RelativePathExpr ( (jjtree.peekNode() instanceof XPathAxisStep ) || ( jjtree.nodeArity()>1 ))
}

void NonQNameAxisStep() : 
{
}
{
  (  
    ExplicitAxisNodeTest()
  )
  | 
  ( 
    (( KindTest() | WildcardNameTest()) PredicateList()) {jjtThis.fixupDefaultAxis();}
  ) #AxisStep
  | 
  ( 
   (<AQUANR> NodeTest() PredicateList()) {jjtThis.setAxis(XPathAxisStep.ATTRIBUTE);}
  ) #AxisStep
  | 
  ( 
   (<DOTDOT> GenerateNode() PredicateList()) {jjtThis.setAxis(XPathAxisStep.PARENT); }
  ) #AxisStep
}

void GenerateNode() #AnyNodeTest :
{}
{
{}
}

/*
 * Generate a descendant-or-self::node() without consuming anything
 */
void GenerateDOSNode() #AxisStep :
{}
{
GenerateNode()
PredicateList()
{
jjtThis.setAxis(XPathAxisStep.DESCENDANT_OR_SELF);
}
}


void ExplicitAxisNodeTest() #AxisStep :
{short a;}
{
 (
  (
    (<CHILD_AXIS> {a = XPathAxisStep.CHILD;})
  | (<DESCENDANT_AXIS> {a = XPathAxisStep.DESCENDANT;})
  | (<ATTRIBUTE_AXIS> {a = XPathAxisStep.ATTRIBUTE;})
  | (<SELF_AXIS> {a = XPathAxisStep.SELF;})
  | (<DESCENDANT_OR_SELF_AXIS> {a = XPathAxisStep.DESCENDANT_OR_SELF;})
  | (<FOLLOWING_SIBLING_AXIS> {a = XPathAxisStep.FOLLOWING_SIBLING;})
  | (<FOLLOWING_AXIS> {a = XPathAxisStep.FOLLOWING;})
  | (<NAMESPACE_AXIS> {a = XPathAxisStep.NAMESPACE;})
  | (<PARENT_AXIS> {a = XPathAxisStep.PARENT;})
  | (<ANCESTOR_AXIS> {a = XPathAxisStep.ANCESTOR;})
  | (<PRECEDING_SIBLING_AXIS> {a = XPathAxisStep.PRECEDING_SIBLING;})
  | (<PRECEDING_AXIS> {a = XPathAxisStep.PRECEDING;})
  | (<ANCESTOR_OR_SELF_AXIS> {a = XPathAxisStep.ANCESTOR_OR_SELF;})
  )
  NodeTest()
  PredicateList()
 ) {jjtThis.setAxis(a);}
}

void NodeTest() :
{}
{
  NameTest() | KindTest()
}

void NameTest() :
{
  Token qname;
}
{
  (( token = <QNAME> | token = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>  ) QNameTest(token)) | WildcardNameTest()
}

void WildcardNameTest() #NameTest :
{
  Token wc;
}
{
  (( wc = <ANYLOCALNAME> ) | ( wc = <ANYNAMESPACENAME> ) | ( wc = <STAR> ))
{
jjtThis.setQName(wc, nsExpander, noPrefixBehavior);
}
}

void Predicate() :
{}
{
  <LBRACKET> Expr() <RBRACKET>
}

void NonQNamePrimaryExpr() :
{}
{
  Literal() | ContextItemExpr() | VarRef() | ParenthesizedExpr()
}

void Literal() :
{}
{
  NumericLiteral() | StringLiteral()
}

void NumericLiteral() :
{}
{
  IntegerLiteral() | DecimalLiteral() | DoubleLiteral()
}

void VarRef() #VarRef :
{
  Token qname;
}
{
  <DOLLAR> (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO> ) PredicateList()
{
try {
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
} catch (Exception ex) {
RuntimeException ex2 = new RuntimeException(ex);
throw ex2;
}
}
}

void ParenthesizedExpr() #ParenthesizedExpr :
{}
{
  <LPAREN> (Expr() <RPAREN> | (<RPAREN>)) PredicateList()
}

void ContextItemExpr() #AxisStep :
{}
{
  ( <DOT> GenerateNode() PredicateList() ) {jjtThis.setAxis(XPathAxisStep.SELF);}
}

/*
 * Wee need this pretty much only for distinguishing between arguments and predicates on functions ...
 */
void PredicateList() #PredicateList :
{}
{
  (Predicate())*
}

/*
 * Hvad er det?
 */
void SingleType() #SingleType :
{
  Token qname = null;
  Token nillable = null;
}
{
  (( qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>) ( nillable = <QUESTION>)?)
{
  jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
  if (nillable!=null)
    jjtThis.setNillable();
}
}

void SequenceType() :
{
  Token c = null;
}
{
  ((<EMPTY_SEQUENCELPAREN> <RPAREN> ) #EmptySequenceType) | 
  (((ItemType() 
   ( c = <QUESTION> | c = <STAR> | c = <PLUS> )?) { jjtThis.setCard(c);} ) #ItemType )
}

void ItemType() :
{}
{ 
  KindTest() | (<ITEMLPAREN> <RPAREN>) #ItemTest | QNamedType()
}

void QNamedType() #NameTest :
{
  Token qname = null;
}
{
  (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>  )
{
  jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

void KindTest() :
{}
{
    DocumentTest()
  | ElementTest() 
  | AttributeTest()
  | SchemaElementTest()
  | SchemaAttributeTest()
  | PITest()
  | CommentTest()
  | TextTest()
  | AnyKindTest()
}

void AnyKindTest() #AnyNodeTest :
{}
{
  <NODELPAREN> <RPAREN>
}

void DocumentTest() #DocumentTest :
{}
{
  (<DOCUMENT_NODELPAREN> (ElementTest() | SchemaElementTest())? <RPAREN>)
}

void TextTest() #TextTest :
{}
{
  <TEXTLPARENRPAREN>
}

void CommentTest() #CommentTest :
{}
{
  (<COMMENTLPAREN> <RPAREN>)
}

/*
 * TODO: Throw exc if non-NCNAME QNAME
 */
void PITest() #PITest :
{
  Token target = null;
}
{
(
  <PROCESSING_INSTRUCTIONLPAREN>
  ((target = <QNAME> | target = <DIV> | target = <ELSE> | target = <THEN> | target = <RETURN> | target = <TO>) | ( target = <STRINGLITERAL> ))?
  <RPAREN>
) { jjtThis.setTarget (target==null ? null : target.image); }
}

void SchemaAttributeTest() # SchemaAttributeTest :
{
  Token qname = null;
}
{
  <SCHEMA_ATTRIBUTELPAREN> (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> |qname = <TO>) <RPAREN> 
{
  jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

void ElementTest() #ElementTest :
{ 
boolean localNameStar = false;
boolean nillable = false;
Token qname = null;
Token typeqname = null;
}
{
  <ELEMENTLPAREN> 
((((qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> ) {localNameStar = false;} ) | (<STAR> {localNameStar = true;}))
   (<COMMA> (( typeqname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>)) ( <QUESTION> {nillable=true;})?)?
  <RPAREN>)
{
if (localNameStar) {
jjtThis.setQName("*", nsExpander, noPrefixBehavior);
} else if (qname!=null) {
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
} else jjtThis.setQName("*", nsExpander, noPrefixBehavior);
if (typeqname!=null)
jjtThis.setTypeQName(typeqname, nsExpander, noPrefixBehavior);
if(nillable) {
jjtThis.setNillable(true);
}
}
}

void AttributeTest() #AttributeTest :
{ 
boolean localNameStar = false;
boolean nillable = false;
Token qname = null;
Token typeqname = null;
}
{
  <ATTRIBUTELPAREN> 
((((qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>) {localNameStar = false;} ) | (<STAR> {localNameStar = true;}))
   (<COMMA> ((typeqname = <QNAME> | typeqname = <DIV> | typeqname = <ELSE> | typeqname = <THEN> | typeqname = <RETURN> | typeqname = <TO>)))?
  <RPAREN>)
{
if (localNameStar) {
jjtThis.setQName("*", nsExpander, noPrefixBehavior);
} else {
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
if (typeqname!=null) {
jjtThis.setQName(typeqname, nsExpander, noPrefixBehavior);
}
}
}

void SchemaElementTest() #SchemaElementTest :
{
  Token qname;
}
{
  (<SCHEMA_ELEMENTLPAREN> (qname = <QNAME> | qname = <DIV> | qname = <ELSE> | qname = <THEN> | qname = <RETURN> | qname = <TO>) <RPAREN>)
{
jjtThis.setQName(qname, nsExpander, noPrefixBehavior);
}
}

/*
 * Type could be sharpened if desired.
 */
void IntegerLiteral() #NumericLiteral :
{
  Token content = null;
}
{
(( content = <DIGITS> ) PredicateList())
{
  jjtThis.setContent(content.image);
}
}

/*
 * Type could be sharpened if desired.
 */
void DecimalLiteral() #NumericLiteral :
{
  Token content = null;
}
{
(( content = <DECIMAL> ) PredicateList() )
{
  jjtThis.setContent(content.image);
}
}

/*
 * Type could be sharpened if desired.
 */
void DoubleLiteral() #NumericLiteral :
{
  Token content = null;
}
{
(
  ((content = <DOUBLE>) PredicateList())
)
{
  jjtThis.setContent(content.image);
}
}

void StringLiteral() #StringLiteral :
{
  Token content;
}
{
( 
  ((content = <STRINGLITERAL>) PredicateList())
)
 {jjtThis.setContent(content.image);} 
}

/* TODO: Make this work
void Comment() :
{}
{
  <LSMILEY> (CommentContents() | Comment())* <RSMILEY>
}

void CommentContents() :
{}
{
  (<CHAR>)+ 
}
*/
